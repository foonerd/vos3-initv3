#!/bin/sh
#

validate_imgfile_imgpart() {

  BOOT_DEVICE=/dev/$(lsblk -no PKNAME "${BOOT_PARTITION}")
  BOOT_CONFIG="cmdline.txt"
  
  log_begin_msg "Current squash image " $SQUASH_FILE && log_end_msg
  log_begin_msg "Current boot partition " $BOOT_PARTITION && log_end_msg
  log_begin_msg "Current image partition " $IMAGE_PARTITION && log_end_msg
  log_begin_msg "Current data partition " $DATA_PARTITION && log_end_msg
  log_begin_msg "Current boot device " $BOOT_DEVICE && log_end_msg
  log_begin_msg "Current boot config file " $BOOT_CONFIG && log_end_msg
}

unpack_kernel() {
# Overruling default kernel unpack
# Used when block device information (eg. /dev/mmcblk0p1) needs to replaced by UUID
  if [ -z "${UUIDFMT}" ]; then
    log_begin_msg "Unpacking kernel without cmdline.txt"
    tar xf ${IMAGE_PARTITION}/kernel_current.tar --exclude=cmdlinux.txt -C ${BOOTMNT}
    log_success_msg
    log_begin_msg "Done, replace block device information with discovered UUIDs."
    UUID_BOOT=$(blkid -s UUID -o value ${BOOT_PARTITION}
    UUID_IMG=$(blkid -s UUID -o value ${IMAGE_PARTition})
    UUID_DATA=$(blkid -s UUID -o value ${DATA_PARTITION})
    cp ${BOOT_CONFIG} ${BOOT_CONFIG}.old
    sed -i "s/imgpart=/dev/[a-z]\{3,6\}[0-9]\{1,2\}[a-z]\{0,1\}[0-9]\{0,2\}/imgpart=UUID=${UUID_IMG} datapart=UUID=${UUID_DATA} bootpart=UUID=${UUID_BOOT} bootconfig=cmdline.txt/g" ${BOOT_CONFIG}
    log_success_msg "Block device information replaced by UUID"
  else
    log_begin_msg "Processing a kernel update, unpack kernel archive"
    tar xf ${IMAGE_PARTITION}/kernel_current.tar -C ${BOOTMNT}
    log_end_msg
  fi  
}
